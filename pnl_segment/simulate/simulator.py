import pathlib
import tempfile
import uuid

import numpy as np


class Simulator:
    """ generates an effect, and applies it to random healthy, outputs nii

    a healthy img is generated by sampling the given healthy population.
    an effect img is generated by adding some constant vector to same mask of a
    healthy image (see effect.py)

    Attributes:
        f_img_tree (dict): first keys are sbj, second keys are names of feat,
                           leafs are names of files which contain img of
                           sbj's feat (all assumed in registered space)
    """

    def __init__(self, f_img_tree, effect):
        self.f_img_tree = f_img_tree
        self.effect = effect

        # fix order of sbj_list
        self.sbj_list = sorted(self.f_img_tree.keys())

    def sample_all_eff(self):
        f_img_tree = dict()
        for sbj in self.sbj_list:
            f_img_tree[sbj] = self.sample_eff(sbj)

        return f_img_tree

    def sample_eff(self, sbj=None, label='{sbj}_{feat}_{uniq}_effect.nii.gz',
                   folder=None):
        # choose random sbj if needed
        if sbj is None:
            sbj = np.random.choice(self.sbj_list)

        # if no folder passed, put in temp
        if folder is None:
            folder = pathlib.Path(tempfile.TemporaryDirectory().name)
            folder.mkdir()

        # build f_nii_dict_out
        f_nii_dict_out = dict()
        for feat in self.effect.feat_label:
            uniq = uuid.uuid4().hex[:6]
            f_nii_dict_out[feat] = folder / label.format(sbj=sbj, feat=feat,
                                                         uniq=uniq)

        # apply effect
        f_nii_dict = self.f_img_tree[sbj]
        self.effect.apply_to_from_nii(f_nii_dict, f_nii_dict_out)

        return f_nii_dict_out
